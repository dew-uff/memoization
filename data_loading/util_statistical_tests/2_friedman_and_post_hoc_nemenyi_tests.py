import numpy as np
from scipy import stats
import pandas as pd
import matplotlib.pyplot as plt
import scikit_posthocs as sp

# Sample data for four architectures (replace with your actual data)
architecture_lazy = [0.27763053635135293, 0.2797640166245401, 0.27710303477942944, 0.2810188992880285, 0.2807469377294183,     0.11727263603825122, 0.2214008699520491, 0.3263486744835973, 0.42826401098864153, 0.5342636539135128, 17.0244869699236, 18.146642032428645, 10.88068922702223, 14.665134681505151, 24.163967740605585, 2.062863896950148, 0.2565847379155457, 0.038458857918158174, 0.008620960463304073, 0.0033323814859613776, 13.939900673984084, 13.442613079561852, 12.953529507038184, 12.594966611533891, 11.97629208950093, 8.220480071962811, 9.392653284478001, 10.353547181468457, 11.461884046497289, 12.580692255462054, 0.03590297850314528, 0.1332557670539245, 0.33246993250213563, 0.068055116571486, 0.10007978195790201, 0.21414554899092764, 0.389909710502252, 0.2848244404885918, 0.3157298299483955, 0.24819662154186517, 0.0685501164989546, 0.03431985853239894, 0.09684488398488611, 0.12794094847049564, 0.15899751498363912, 0.016273364541120827, 0.016814152477309108, 0.016210689558647573, 0.014176174532622099, 0.016192328999750316]
architecture_func_seq = [0.00265621580183506, 0.0026481621898710728, 0.002635147888213396, 0.002731495536863804, 0.0026856730692088604,     0.11320141202304512, 0.21605958451982588, 0.317130591487512, 0.4206458079861477, 0.5222147074528039, 0.16778146498836577, 0.17305145697901025, 0.11809586849994957, 0.14862325001740828, 0.22986759949708357, 0.22955126949818805, 0.028801356093026698, 0.00597691407892853, 0.0027962199528701603, 0.0024064364843070507, 14.679361108515877, 14.157631651964039, 13.537598832510412, 12.964827353483997, 12.405620780074969, 8.185184166941326, 9.146032244083472, 10.407305590983015, 11.458213496953249, 12.74519988289103, 0.036121575511060655, 0.1340059859212488, 0.33188173407688737, 0.06804468051996082, 0.09951545356307179, 0.21415719401556998, 0.38742062053643167, 0.28629552153870463, 0.3175504005048424, 0.25012755405623466, 0.06910958152730018, 0.034226802992634475, 0.09703186887782067, 0.12753014697227627, 0.15932158497162163, 0.0045597749995067716, 0.004393446957692504, 0.004319546045735478, 0.0040435855044052005, 0.004597199498675764]
architecture_func_thread = [0.0030461582355201244, 0.0030036703683435917, 0.003005106933414936, 0.0030053122900426388, 0.0029677655547857285,     0.11630582390353084, 0.21898761810734868, 0.3245271937921643, 0.43165435502305627, 0.5283596673980355, 0.1539619704708457, 0.16646198881790042, 0.10503143607638776, 0.13622021698392928, 0.2154396881815046, 0.036619982682168484, 0.13259244267828763, 0.3261514955665916, 0.06817027693614364, 0.10020298231393099, 0.21221374766901135, 0.38303353311493993, 0.2808810886926949, 0.3163646140601486, 0.24593820865266025, 0.004200715804472566, 0.002496582455933094, 0.003703854512423277, 0.0024828340392559767, 0.003509810660034418, 23.476030305493623, 22.827381486305967, 21.906016821973026, 21.13259697565809, 20.378017206909135, 13.611129588913172, 15.359718084102497, 17.316917267628014, 19.287593103479594, 21.368345790775493, 0.09420055337250233, 0.04681106167845428, 0.13350098533555865, 0.17699475586414337, 0.21894781826995313, 0.002714496571570635, 0.0026531664188951254, 0.0026489959564059973, 0.0025986062828451395, 0.0026659267023205757]
architecture_eager_seq = [0.005663460586220026, 0.005618508905172348, 0.005622506141662598, 0.005696068983525038, 0.005631227511912584,     0.11664951255079359, 0.2157980774063617, 0.31847325939452276, 0.4194123215856962, 0.5203030414995737, 0.35685042198747396, 0.295100505463779, 0.3005272409063764, 0.32615387707483023, 0.4330778931034729, 0.21485557255800813, 0.026687731442507356, 0.0057040860410779715, 0.002775888890028, 0.0024050140054896474, 14.224207813036628, 13.759432928520255, 13.332054883707315, 12.996211241115816, 12.635024129995145, 8.039386880001985, 8.955075748555828, 10.163587493007071, 11.39557527640136, 12.459590659535024, 0.036051691975444555, 0.13396013097371906, 0.33334217604715377, 0.0677707385038957, 0.09977164398878813, 0.21446886647026986, 0.39139545150101185, 0.2830175175331533, 0.3181656365050003, 0.2491036815335974, 0.06889317242894322, 0.034202255425043404, 0.09754853404592723, 0.12751726352144033, 0.15882839157711715, 0.00439105648547411, 0.0044003690127283335, 0.004178331117145717, 0.003876583999954164, 0.004341974970884621]
architecture_eager_thread = [0.2888014782220125, 0.28945734025910497, 0.28798429435119033, 0.28723654709756374, 0.2899999083019793,     0.11911980877630413, 0.22159865801222622, 0.32363053830340505, 0.4279645010828972, 0.52867138129659, 8.286305958405137, 9.103571612620726, 5.607019362039864, 7.514800020027906, 11.709509523585439, 0.03758717654272914, 0.13782873819582164, 0.33849235298112035, 0.06981358746998012, 0.1023667948320508, 0.21647886908613145, 0.39761537010781467, 0.2843196645844728, 0.3238337724469602, 0.2537546646781266, 1.6897615615744144, 0.23060503718443215, 0.04873853153549135, 0.012687444686889648, 0.004931621719151735, 21.51531729870476, 20.773294114740565, 20.092198168626055, 19.282593260286376, 18.58882580511272, 12.494346455670893, 14.164656060514972, 15.856188111007214, 17.655662312638015, 19.679068494588137, 0.0890771655831486, 0.044657861115410924, 0.1266773531679064, 0.1673876449931413, 0.20966858440078795, 0.02948252228088677, 0.03243526187725365, 0.02610579039901495, 0.024106698809191585, 0.029339576605707407]

# Combine data into a matrix where each row represents an experiment and each column an architecture
data_matrix = np.array([architecture_lazy, architecture_func_seq, architecture_func_thread, architecture_eager_seq, architecture_eager_thread]).T

# Friedman Test
friedman_stat, friedman_p_value = stats.friedmanchisquare(*data_matrix.T)
print(f'Friedman test statistic: {friedman_stat}')
print(f'p-value for Friedman test: {friedman_p_value}')

# Check if the p-value indicates statistical significance
alpha = 0.05
if friedman_p_value < alpha:
    print('There is a statistically significant difference between architectures (Friedman test).')
    
    # Perform post-hoc analysis using Nemenyi test if Friedman test is significant
    posthoc_results = sp.posthoc_nemenyi_friedman(data_matrix)
    print('\nPost-hoc Nemenyi test results:')
    print(posthoc_results)
else:
    print('There is no statistically significant difference between architectures (Friedman test).')

# Box plot for visualization
plt.figure(figsize=(12, 6))
plt.boxplot([architecture_lazy, architecture_func_seq, architecture_func_thread, architecture_eager_seq, architecture_eager_thread], labels=['lazy', 'func_seq', 'func_thread', 'eager_seq', 'eager_thread'])
plt.title('Performance Comparison of Four Architectures')
plt.ylabel('Time')
plt.grid(True)
plt.show()
