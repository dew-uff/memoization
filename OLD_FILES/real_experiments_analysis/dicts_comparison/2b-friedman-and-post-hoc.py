import numpy as np
from scipy import stats
import pandas as pd
import matplotlib.pyplot as plt
import scikit_posthocs as sp

# Sample data for four architectures (replace with your actual data)
architecture_A = [0.25423298601526767, 0.4885789949912578, 0.7112132629845291, 0.9412912069819868, 1.149397719069384, 45.52429483097512, 53.091745764017105, 27.85102778702276, 39.830332315992564, 66.02930595295038, 2.136914863542188, 0.25397041195537895, 0.038267395459115505, 0.008382269472349435, 0.0033730785362422466, 14.110051966505125, 13.57009851897601, 13.26910081144888, 12.681035112997051, 12.117189400480129, 7.988446414005011, 9.092895275971387, 10.213530759443529, 11.371689767926, 12.565150247537531, 0.2791749609168619, 0.2772424074355513, 0.27600318694021553, 0.27703141747042537, 0.27380396344233304, 0.04088652809150517, 0.14250942249782383, 0.35532439639791846, 0.07230141654144973, 0.10805359005462378, 0.22249531699344516, 0.4096600004704669, 0.291539765894413, 0.3298217405099422, 0.25541440851520747, 0.0737982279388234, 0.035464885528199375, 0.0990182914538309, 0.13122600503265858, 0.16427007608581334, 0.01995832845568657, 0.016174780437722802, 0.0156487604836002, 0.01461506204213947, 0.016641836962662637]
architecture_B = [0.11304701853077859, 0.21772548148874193, 0.313950575015042, 0.4113886560080573, 0.5001971524325199, 15.549003766442183, 16.878969350014813, 10.00301057298202, 13.451118138502352, 21.28786007798044, 2.3113375320099294, 0.28104004747001454, 0.041752809018362314, 0.008753943024203181, 0.0034979364718310535, 13.71188766846899, 13.600358521507587, 13.069761725550052, 12.365669709513895, 11.958732839033473, 7.971466690010857, 9.029676372476388, 10.126710654003546, 11.392878961516544, 12.554738658480346, 1.8187102554365993, 9.117800810956396, 18.333953902008943, 183.18158581503667, 90.04826418159064, 0.036898943479172885, 0.13556243642233312, 0.34161147999111563, 0.07020660245325416, 0.10366959311068058, 0.21706237201578915, 0.3951678848825395, 0.28631498850882053, 0.3238559825113043, 0.2529745214851573, 0.06972766248509288, 0.0353632589103654, 0.09775838744826615, 0.13030940853059292, 0.16122951998841017, 0.018164277425967157, 0.01782887091394514, 0.016976538579910994, 0.015578015008941293, 0.018130896030925214]
architecture_C = [0.12180145148886368, 0.22918811504496261, 0.33025206602178514, 0.43002981250174344, 0.5376092470251024, 16.940991569077596, 18.62418412900297, 10.62527790950844, 14.673920806089882, 23.25147325155558, 2.1386269095237367, 0.25600865855813026, 0.039178389008156955, 0.00828602846013382, 0.0034035950084216893, 13.506318432511762, 13.097040560969617, 12.67346242145868, 12.165880386484787, 11.719352857035119, 7.8905038314987905, 8.847838191548362, 9.936104565509595, 11.029591196973342, 12.184617359947879, 1.8257577915210277, 9.183536143042147, 18.182237724540755, 183.97985901904758, 92.73663691594265, 0.036903628963045776, 0.1377387495012954, 0.34086416254285723, 0.07081104558892548, 0.1043099119560793, 0.21881706197746098, 0.3949089666130021, 0.28738037846051157, 0.3246529499301687, 0.2538935577031225, 0.06998145743273199, 0.03460868343245238, 0.09735339053440839, 0.1281080780318007, 0.1607023284304887, 0.01689316693227738, 0.016551851062104106, 0.015818551531992853, 0.014580929069779813, 0.01683055143803358]
architecture_D = [0.11408632551319897, 0.2138795384671539, 0.307728098006919, 0.4226634880178608, 0.5012735945056193, 15.510359211999457, 16.91982306400314, 10.151453127560671, 13.41576324502239, 21.619668830535375, 2.3893091250211, 0.29147187795024365, 0.04307466605678201, 0.008991310489363968, 0.003535747469868511, 13.903931928507518, 13.593190542014781, 13.152464464481454, 12.663143931946252, 11.957198549993336, 8.050598193018232, 9.083809089032002, 10.170780011510942, 11.354065933963284, 12.560380920942407, 1.8259272524155676, 9.118106795591302, 17.974820224568248, 180.4173692439217, 91.0108960805228, 0.0367181240580976, 0.1371236479608342, 0.33808071340899915, 0.0706393449800089, 0.10261820605956018, 0.21643579646479338, 0.39852208842057735, 0.28841615305282176, 0.3247882700525224, 0.25572342495433986, 0.06994937499985099, 0.035035497043281794, 0.10009535506833345, 0.12982910545542836, 0.16146943951025605, 0.018474727985449135, 0.018053606618195772, 0.017368343425914645, 0.01593629247508943, 0.01845492096617818]

# Combine data into a matrix where each row represents an experiment and each column an architecture
data_matrix = np.array([architecture_A, architecture_B, architecture_C, architecture_D]).T

# Friedman Test
friedman_stat, friedman_p_value = stats.friedmanchisquare(*data_matrix.T)
print(f'Friedman test statistic: {friedman_stat}')
print(f'p-value for Friedman test: {friedman_p_value}')

# Check if the p-value indicates statistical significance
alpha = 0.05
if friedman_p_value < alpha:
    print('There is a statistically significant difference between architectures (Friedman test).')
    
    # Perform post-hoc analysis using Nemenyi test if Friedman test is significant
    posthoc_results = sp.posthoc_nemenyi_friedman(data_matrix)
    print('\nPost-hoc Nemenyi test results:')
    print(posthoc_results)
else:
    print('There is no statistically significant difference between architectures (Friedman test).')

# Box plot for visualization
plt.figure(figsize=(12, 6))
plt.boxplot([architecture_A, architecture_B, architecture_C, architecture_D], labels=['Architecture A', 'Architecture B', 'Architecture C', 'Architecture D'])
plt.title('Performance Comparison of Four Architectures')
plt.ylabel('Time')
plt.grid(True)
plt.show()
