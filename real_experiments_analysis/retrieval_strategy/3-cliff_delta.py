import numpy as np

def cliff_delta(x, y):
    """
    Calculate Cliff's Delta for two arrays x and y.
    
    Parameters:
    x (array-like): Array of values for group X.
    y (array-like): Array of values for group Y.
    
    Returns:
    float: Cliff's Delta value.
    """
    x = np.asarray(x)
    y = np.asarray(y)
    
    # Calculate number of pairs where x > y and x < y
    n_x = len(x)
    n_y = len(y)
    
    C = 0
    D = 0
    
    for xi in x:
        for yi in y:
            if xi > yi:
                C += 1
            elif xi < yi:
                D += 1
    
    N = C + D
    if N == 0:
        return 0  # No pairs to compare
    
    delta = (C - D) / N
    return delta

def calculate_cliffs_delta_for_all_pairs(data_dict):
    """
    Calculate Cliff's Delta for all pairs of groups in the data dictionary.
    
    Parameters:
    data_dict (dict): A dictionary where keys are group names and values are lists/arrays of values.
    
    Returns:
    dict: A dictionary with pairs of group names as keys and Cliff's Delta as values.
    """
    groups = list(data_dict.keys())
    num_groups = len(groups)
    
    delta_results = {}
    
    for i in range(num_groups):
        for j in range(i + 1, num_groups):
            group1 = groups[i]
            group2 = groups[j]
            values1 = data_dict[group1]
            values2 = data_dict[group2]
            
            delta = cliff_delta(values1, values2)
            delta_results[(group1, group2)] = delta
            
    return delta_results

# Example usage
if __name__ == "__main__":
    # Example data: Replace with your actual data
    data = {
        'Architecture_A': [0.11664951255079359, 0.2157980774063617, 0.31847325939452276, 0.4194123215856962, 0.5203030414995737, 0.35685042198747396, 0.295100505463779, 0.3005272409063764, 0.32615387707483023, 0.4330778931034729, 0.21485557255800813, 0.026687731442507356, 0.0057040860410779715, 0.002775888890028, 0.0024050140054896474, 14.224207813036628, 13.759432928520255, 13.332054883707315, 12.996211241115816, 12.635024129995145, 8.039386880001985, 8.955075748555828, 10.163587493007071, 11.39557527640136, 12.459590659535024, 0.002415066468529403, 0.0023779449984431267, 0.002380456542596221, 0.002362716943025589, 0.0023565569426864386, 0.036051691975444555, 0.13396013097371906, 0.33334217604715377, 0.0677707385038957, 0.09977164398878813, 0.21446886647026986, 0.39139545150101185, 0.2830175175331533, 0.3181656365050003, 0.2491036815335974, 0.06889317242894322, 0.034202255425043404, 0.09754853404592723, 0.12751726352144033, 0.15882839157711715, 0.00439105648547411, 0.0044003690127283335, 0.004178331117145717, 0.003876583999954164, 0.004341974970884621],
        'Architecture_B': [0.9591476735658944, 4.682760653551668, 9.477426558500156, 94.20490472856909, 46.976528336526826, 0.11911980877630413, 0.22159865801222622, 0.32363053830340505, 0.4279645010828972, 0.52867138129659, 8.286305958405137, 9.103571612620726, 5.607019362039864, 7.514800020027906, 11.709509523585439, 0.03758717654272914, 0.13782873819582164, 0.33849235298112035, 0.06981358746998012, 0.1023667948320508, 0.21647886908613145, 0.39761537010781467, 0.2843196645844728, 0.3238337724469602, 0.2537546646781266, 1.6897615615744144, 0.23060503718443215, 0.04873853153549135, 0.012687444686889648, 0.004931621719151735, 21.51531729870476, 20.773294114740565, 20.092198168626055, 19.282593260286376, 18.58882580511272, 12.494346455670893, 14.164656060514972, 15.856188111007214, 17.655662312638015, 19.679068494588137, 0.0890771655831486, 0.044657861115410924, 0.1266773531679064, 0.1673876449931413, 0.20966858440078795, 0.02948252228088677, 0.03243526187725365, 0.02610579039901495, 0.024106698809191585, 0.029339576605707407],
        'Architecture C': [0.11727263603825122, 0.2214008699520491, 0.3263486744835973, 0.42826401098864153, 0.5342636539135128, 17.0244869699236, 18.146642032428645, 10.88068922702223, 14.665134681505151, 24.163967740605585, 2.062863896950148, 0.2565847379155457, 0.038458857918158174, 0.008620960463304073, 0.0033323814859613776, 13.939900673984084, 13.442613079561852, 12.953529507038184, 12.594966611533891, 11.97629208950093, 8.220480071962811, 9.392653284478001, 10.353547181468457, 11.461884046497289, 12.580692255462054, 1.8038664869964123, 9.145238763419911, 18.714204780524597, 186.12229133304209, 91.1813458329998, 0.03590297850314528, 0.1332557670539245, 0.33246993250213563, 0.068055116571486, 0.10007978195790201, 0.21414554899092764, 0.389909710502252, 0.2848244404885918, 0.3157298299483955, 0.24819662154186517, 0.0685501164989546, 0.03431985853239894, 0.09684488398488611, 0.12794094847049564, 0.15899751498363912, 0.016273364541120827, 0.016814152477309108, 0.016210689558647573, 0.014176174532622099, 0.016192328999750316],
        'Architecture D': [0.11320141202304512, 0.21605958451982588, 0.317130591487512, 0.4206458079861477, 0.5222147074528039, 0.16778146498836577, 0.17305145697901025, 0.11809586849994957, 0.14862325001740828, 0.22986759949708357, 0.22955126949818805, 0.028801356093026698, 0.00597691407892853, 0.0027962199528701603, 0.0024064364843070507, 14.679361108515877, 14.157631651964039, 13.537598832510412, 12.964827353483997, 12.405620780074969, 8.185184166941326, 9.146032244083472, 10.407305590983015, 11.458213496953249, 12.74519988289103, 0.002380094025284052, 0.0023972970666363835, 0.0023871409939602017, 0.0024219590704888105, 0.0024137916043400764, 0.036121575511060655, 0.1340059859212488, 0.33188173407688737, 0.06804468051996082, 0.09951545356307179, 0.21415719401556998, 0.38742062053643167, 0.28629552153870463, 0.3175504005048424, 0.25012755405623466, 0.06910958152730018, 0.034226802992634475, 0.09703186887782067, 0.12753014697227627, 0.15932158497162163, 0.0045597749995067716, 0.004393446957692504, 0.004319546045735478, 0.0040435855044052005, 0.004597199498675764],
        'Architecture E': [0.003359775757417083, 0.0033075534738600254, 0.003314593341201544, 0.0033430554904043674, 0.0033061944413930178, 0.11630582390353084, 0.21898761810734868, 0.3245271937921643, 0.43165435502305627, 0.5283596673980355, 0.1539619704708457, 0.16646198881790042, 0.10503143607638776, 0.13622021698392928, 0.2154396881815046, 0.036619982682168484, 0.13259244267828763, 0.3261514955665916, 0.06817027693614364, 0.10020298231393099, 0.21221374766901135, 0.38303353311493993, 0.2808810886926949, 0.3163646140601486, 0.24593820865266025, 0.004200715804472566, 0.002496582455933094, 0.003703854512423277, 0.0024828340392559767, 0.003509810660034418, 23.476030305493623, 22.827381486305967, 21.906016821973026, 21.13259697565809, 20.378017206909135, 13.611129588913172, 15.359718084102497, 17.316917267628014, 19.287593103479594, 21.368345790775493, 0.09420055337250233, 0.04681106167845428, 0.13350098533555865, 0.17699475586414337, 0.21894781826995313, 0.002714496571570635, 0.0026531664188951254, 0.0026489959564059973, 0.0025986062828451395, 0.0026659267023205757]
    }
    
    results = calculate_cliffs_delta_for_all_pairs(data)
    
    for pair, delta in results.items():
        print(f"Cliff's Delta between {pair[0]} and {pair[1]}: {delta:.3f}")

